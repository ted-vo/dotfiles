#!/usr/bin/env bash

# Thanks https://www.youtube.com/@SolDoesTech for guilde. I learn from it to build my own.
# IMPORTANT - This script is meant to run on a clean fresh Arch install on physical hardware

# Regular Colors
Black='\e[1;30m'  # Black
Red='\e[1;31m'    # Red
Green='\e[1;32m'  # Green
Yellow='\e[1;33m' # Yellow
Blue='\e[1;34m'   # Blue
Purple='\e[1;35m' # Purple
Cyan='\e[1;36m'   # Cyan
White='\e[1;37m'  # White
NC='\e[0m'        # No Color

# Bold color
Bold_Green='\033[1;32m' # Bold Green
Bold_White='\033[1m'    # Bold White

# set some colors
CNT="[${Cyan}NOTE${NC}]"
COK="[${Green}OK${NC}]"
CER="[${Red}ERROR${NC}]"
CAT="[${White}ATTENTION${NC}]"
CWR="[${Purple}WARNING${NC}]"
CAC="[${Yellow}ACTION${NC}]"

INSTLOG="install.log"

# Define the software that would be inbstalled
# Need some prep work
prep_stage=(
  qt5-wayland
  qt5ct
  qt6-wayland
  qt6ct
  qt5-svg
  qt5-quickcontrols2
  qt5-graphicaleffects
  gtk3
  polkit-gnome # needed to get superuser access on some graphical appliaction

  pipewire    # new low-level multimedia framework
  wireplumber # powerful session and policy manager for PipeWire

  jq # JSON

  wl-clipboard
  cliphist
  python-requests # needed for the weather module script to execute
  pacman-contrib
)

# software for nvidia GPU only
nvidia_stage=(
  linux-headers
  nvidia-dkms
  nvidia-settings
  libva
  libva-nvidia-driver-git
)

# the main packages
install_stage=(
  kitty                       # This is the default terminal
  mako                        # This is a graphical notification daemon
  waybar                      # This is a fork of waybar with Hyprland workspace support
  swww                        # This is used to set a desktop background image
  swaylock-effects-git        # This allows for the locking of the desktop its a fork that adds some editional visual effects
  wofi                        # This is an application launcher menu
  wlogout                     # This is a logout menu that allows for shutdown, reboot and sleep
  xdg-desktop-portal-hyprland # xdg-desktop-portal backend for hyprland
  swappy                      # This is a screenshot editor tool
  grim                        # This is a screenshot tool it grabs images from a Wayland compositor
  slurp                       # This helps with screenshots, it selects a region in a Wayland compositor
  thunar                      # GUID file manager
  btop                        # Activities manager
  wlsunset                    # wayland sunset aka filter blue light

  google-chrome # Browser
  firefox       # Browser
  brave         # Browser

  pavucontrol # volume control
  mpv         # Media player
  pamixer     # This helps with audio settings such as volume

  brightnessctl # used to control monitor bright level
  bluez         # the bluetooth service
  blueman       # GUID bluetooth manager
  bluez-utils   # command line utilities to interact with bluettoth devices

  network-manager-applet # network manager
  gvfs                   # adds missing functionality to thunar such as automount usb drives
  thunar-archive-plugin  # thunar archive file manager
  file-roller            # archive manager
  starship               # allows to customize the shell prompt
  papirus-icon-theme

  power-profiles-daemon

  adobe-source-han-sans-cn-fonts # chinese fonts
  ttf-jetbrains-mono-nerd        # Som nerd fonts for icons and overall look
  noto-fonts-emoji               # fonts needed by the weather script in the top bar

  lxappearance   # used to set GTK theme
  xfce4-settings # set of tools for xfce, needed to set GTK theme
  nwg-look       # GTK Setting
  sddm           # Simple desktop display manager
)

show_progress() {
  while ps | grep $1 &>/dev/null; do
    echo -n "."
    sleep 2
  done
  echo -en "Done!\n"
  sleep 2
}

# function that will test for a package and if not found it will attempt to install it
install_software() {
  # First lets see if the package is there
  if yay -Q $1 &>>/dev/null; then
    echo -e "$COK - $1 is already installed."
  else
    # no package found so installing
    echo -en "$CNT - Now installing $1 ."
    yay -S --noconfirm $1 &>>$INSTLOG &
    show_progress $!
    # test to make sure package installed
    if yay -Q $1 &>>/dev/null; then
      echo -e "\e[1A\e[K$COK - $1 was installed."
    else
      # if this is hit then a package is missing, exit to review log
      echo -e "\e[1A\e[K$CER - $1 install had failed, please check the install.log"
      exit
    fi
  fi
}

# clear the screen
clear

pre_install() {
  # set some expectations for the user
  echo -e "$CNT - You are about to execute a script that would attempt to setup Hyprland.
Please note that Hyprland is still in Beta."
  sleep 1

  # attempt to discover if this is a VM or not
  echo -e "$CNT - Checking for Physical or VM..."
  ISVM=$(hostnamectl | grep Chassis)
  echo -e "Using $ISVM"
  if [[ $ISVM == *"vm"* ]]; then
    echo -e "$CWR - Please note that VMs are not fully supported and if you try to run this on
    a Virtual Machine there is a high chance this will fail."
    sleep 1
  fi

  # --------------------------------------------------------
  # let the user know that we will use sudo
  # --------------------------------------------------------
  echo -e "$CNT - This script will run some commands that require sudo. You will be prompted to enter your password.
If you are worried about entering your password then you may want to review the content of the script."
  sleep 1

  # give the user an option to exit out
  read -rep $'[\e[1;33mACTION\e[0m] - Would you like to continue with the install (y,n) ' CONTINST
  if [[ $CONTINST == "Y" || $CONTINST == "y" ]]; then
    echo -e "$CNT - Setup starting..."
    sudo touch /tmp/hyprv.tmp
  else
    echo -e "$CNT - This script will now exit, no changes were made to your system."
    exit
  fi

  # --------------------------------------------------------
  # find the Nvidia GPU
  # --------------------------------------------------------
  if lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia; then
    ISNVIDIA="true"
  else
    ISNVIDIA=false
  fi

  # --------------------------------------------------------
  # Disable wifi powersave mode
  # --------------------------------------------------------
  read -rep $'[\e[1;33mACTION\e[0m] - Would you like to disable WiFi powersave? (y,n) ' WIFI
  if [[ $WIFI == "Y" || $WIFI == "y" ]]; then
    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    echo -e "$CNT - The following file has been created $LOC.\n"
    echo -e "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC &>>$INSTLOG
    echo -en "$CNT - Restarting NetworkManager service, Please wait."
    sleep 3
    sudo systemctl restart NetworkManager &>>$INSTLOG

    #wait for services to restore (looking at you DNS)
    for i in {1..6}; do
      echo -n "."
      sleep 1
    done
    echo -en "Done!\n"
    sleep 2
    echo -e "\e[1A\e[K$COK - NetworkManager restart completed."
  fi
}

# --------------------------------------------------------
# Check for package manager
# --------------------------------------------------------
check_pm_yay() {
  if [ ! -f /sbin/yay ]; then
    echo -en "$CNT - Configuering yay."
    git clone https://aur.archlinux.org/yay.git &>>$INSTLOG
    cd yay
    makepkg -si --noconfirm &>>../$INSTLOG &
    show_progress $!
    if [ -f /sbin/yay ]; then
      echo -e "\e[1A\e[K$COK - yay configured"
      cd ..

      # update the yay database
      echo -en "$CNT - Updating yay."
      yay -Suy --noconfirm &>>$INSTLOG &
      show_progress $!
      echo -e "\e[1A\e[K$COK - yay updated."
    else
      # if this is hit then a package is missing, exit to review log
      echo -e "\e[1A\e[K$CER - yay install failed, please check the install.log"
      exit
    fi
  fi
}

# --------------------------------------------------------
# Install all of the above pacakges
# --------------------------------------------------------
install() {
  check_pm_yay

  read -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the packages? (y,n) ' INST
  if [[ $INST == "Y" || $INST == "y" ]]; then

    # Prep Stage - Bunch of needed items
    echo -e "$CNT - Prep Stage - Installing needed components, this may take a while..."
    for SOFTWR in ${prep_stage[@]}; do
      install_software $SOFTWR
    done

    # Setup Nvidia if it was found
    if [[ "$ISNVIDIA" == true ]]; then
      echo -e "$CNT - Nvidia GPU support setup stage, this may take a while..."
      for SOFTWR in ${nvidia_stage[@]}; do
        install_software $SOFTWR
      done

      # update config
      sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
      sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
      echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf &>>$INSTLOG
    fi

    # Install the correct hyprland version
    echo -e "$CNT - Installing Hyprland, this may take a while..."
    if [[ "$ISNVIDIA" == true ]]; then
      # check for hyprland and remove it so the -nvidia package can be installed
      if yay -Q hyprland &>>/dev/null; then
        yay -R --noconfirm hyprland &>>$INSTLOG &
      fi
      install_software hyprland-nvidia
    else
      install_software hyprland
    fi

    # Stage 1 - main components
    echo -e "$CNT - Installing main components, this may take a while..."
    for SOFTWR in ${install_stage[@]}; do
      install_software $SOFTWR
    done

    # Start the bluetooth service
    echo -e "$CNT - Starting the Bluetooth Service..."
    sudo systemctl enable --now bluetooth.service &>>$INSTLOG
    sleep 2

    # Enable the sddm login manager service
    echo -e "$CNT - Enabling the SDDM Service..."
    sudo systemctl enable sddm &>>$INSTLOG
    sleep 2

    # Clean out other portals
    echo -e "$CNT - Cleaning out conflicting xdg portals..."
    yay -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk &>>$INSTLOG
  fi
}

# --------------------------------------------------------
# Copy Config Files ###
# --------------------------------------------------------
post_install() {
  read -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy config files? (y,n) ' CFG
  if [[ $CFG == "Y" || $CFG == "y" ]]; then
    echo -e "$CNT - Syncing config files..."
    rsync -au "$HOME/.dotfiles/.config/hyprland" "$HOME/.config"

    # Setup each application
    # check for existing config folders and backup
    for DIR in kitty mako swaylock waybar wlogout wofi; do
      DIRPATH="$HOME/.config/$DIR"
      if [ -d "$DIRPATH" ]; then
        echo -e "$CAT - Config for $DIR located, backing up."
        mv $DIRPATH $DIRPATH-back &>>$INSTLOG
        echo -e "$COK - Backed up $DIR to $DIRPATH-back."
      fi

      # sync new configures
      mkdir -p $DIRPATH &>>$INSTLOG
    done

    # link up the config files
    echo -e "$CNT - Setting up the new config..."
    ln -sf "$HOME/.config/hyprland/hypr" "$HOME/.config"
    ln -sf "$HOME/.config/hyprland/kitty/kitty.conf" "$HOME/.config/kitty/kitty.conf"
    ln -sf "$HOME/.config/hyprland/mako/conf/config-dark" "$HOME/.config/mako/config"
    ln -sf "$HOME/.config/hyprland/swaylock/config" "$HOME/.config/swaylock/config"
    ln -sf "$HOME/.config/hyprland/waybar/conf/v2-config.jsonc" "$HOME/.config/waybar/config.jsonc"
    ln -sf "$HOME/.config/hyprland/waybar/style/v2-style-dark.css" "$HOME/.config/waybar/style.css"
    ln -sf "$HOME/.config/hyprland/wlogout/layout" "$HOME/.config/wlogout/layout"
    ln -sf "$HOME/.config/hyprland/wofi/config" "$HOME/.config/wofi/config"
    ln -sf "$HOME/.config/hyprland/wofi/style/v2-style-dark.css" "$HOME/.config/wofi/style.css"

    # add the Nvidia env file to the config (if needed)
    if [[ "$ISNVIDIA" == true ]]; then
      echo -e "\nsource = ~/.config/hypr/env_var_nvidia.conf" >>~/.config/hypr/hyprland.conf
    fi

    # Copy the SDDM theme
    echo -e "$CNT - Setting up the login screen."
    sudo rsync -au Extras/sdt /usr/share/sddm/themes
    sudo chown -R $USER:$USER /usr/share/sddm/themes/sdt
    test -d "/etc/sddm.conf.d" || sudo mkdir /etc/sddm.conf.d
    echo -e "[Theme]\nCurrent=sdt" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>>$INSTLOG
    WLDIR=/usr/share/wayland-sessions
    if [ -d "$WLDIR" ]; then
      echo -e "$COK - $WLDIR found"
    else
      echo -e "$CWR - $WLDIR NOT found, creating..."
      sudo mkdir $WLDIR
    fi

    # stage the .desktop file
    sudo rsync -au Extras/hyprland.desktop /usr/share/wayland-sessions

    # setup the first look and feel as dark
    xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita-dark"
    xfconf-query -c xsettings -p /Net/IconThemeName -s "Papirus-Dark"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
    gsettings set org.gnome.desktop.interface icon-theme "Papirus-Dark"
    cp -f ~/.config/hyprland/backgrounds/v2-background-dark.jpg /usr/share/sddm/themes/sdt/wallpaper.jpg
  fi
}

### Install the starship shell ###
# read -rep $'[\e[1;33mACTION\e[0m] - Would you like to activate the starship shell? (y,n) ' STAR
# if [[ $STAR == "Y" || $STAR == "y" ]]; then
# 	# install the starship shell
# 	echo -e "$CNT - Hansen Crusher, Engage!"
# 	echo -e "$CNT - Updating .bashrc..."
# 	echo -e '\neval "$(starship init bash)"' >>~/.bashrc
# 	echo -e "$CNT - copying starship config file to ~/.config ..."
# 	cp Extras/starship.toml ~/.config/
# fi

# --------------------------------------------------------
# Script is done
# --------------------------------------------------------
start_hyprland() {
  echo -e "$CNT - Script had completed!"
  if [[ "$ISNVIDIA" == true ]]; then
    echo -e "$CAT - Since we attempted to setup an Nvidia GPU the script will now end and you should reboot.
    Please type 'reboot' at the prompt and hit Enter when ready."
    exit
  fi

  read -rep $'[\e[1;33mACTION\e[0m] - Would you like to start Hyprland now? (y,n) ' HYP
  if [[ $HYP == "Y" || $HYP == "y" ]]; then
    exec sudo systemctl start sddm &>>$INSTLOG
  else
    exit
  fi
}

main() {
  case $1 in
  install)
    pre_install
    install
    post_install
    start_hyprland
    exit
    ;;
  configure)
    post_install
    start_hyprland
    exit
    ;;
  *)
    echo -e "${CER} Available flags: 'install', 'configure'"
    exit
    ;;
  esac
}

main $@
